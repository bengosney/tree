{"version":3,"sources":["Noise.js","Context.js","noisyLine.js","Flower.js","Tree.js","App.js","serviceWorker.js","index.js"],"names":["Noise","length","range","arguments","undefined","radius","seed","Object","classCallCheck","this","noise","OpenSimplexNoise","Date","now","Math","random","a","r","start","findStart","reset","value","r1","r2","PI","y1","y2","y","theta","atan2","prev","get","smallestAngle","Number","MAX_SAFE_INTEGER","bestStart","i","cur","angle","abs","step","x","cos","sin","scale","noise2D","Context","ctx","height","width","OffscreenCanvas","getContext","noisyLine","x1","x2","f","sqrt","getAngle","noiseShape","noiseDetail","floor","yOffset","amplitude","setRange","frequency","setRadius","cx","cy","radians","ax","ay","callback","moveTo","n","_x","_y","_this$rotate","rotate","lineTo","Flower","min","max","rot","petalRadius","point","beginPath","arc","fillStyle","shadowColor","shadowBlur","fill","Tree","getLength","randomRange","drawLimb","level","line","draw","strokeStyle","lineWidth","stroke","_draw","aMod","tx","ty","nx","ny","limbs","diff","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","pixelSize","lenth","drawing","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","_this2","canvas","refs","set","alpha","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","_this3","_document$documentEle","document","documentElement","clientWidth","clientHeight","console","log","setState","initObjects","nextFrame","cancelAnimationFrame","removeEventListener","ts","clearFrame","_this4","setTimeout","_this$state","_width","grd","createRadialGradient","addColorStop","fillRect","getTime","_this$state2","renderElements","tree","push","map","e","_this5","_this$state3","react_default","createElement","className","onClick","disabled","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b227690b.chunk.js","sourcesContent":["import OpenSimplexNoise from 'open-simplex-noise';\n\nclass Noise {\n    constructor(length, range = [1, 100], radius = 2, seed = null) {\n\tthis.noise = new OpenSimplexNoise(seed || Date.now() + Math.random());\n\tthis.length = length;\n\tthis.a = 0;\n\tthis.range = range;\n\tthis.r = radius;\n\n\tthis.start = null;\n\t\n\tthis.findStart();\n\tthis.reset();\n    }\n\n    setRange(range) {\n\tthis.range = range;\n    }\n\n    setRadius(radius) {\n\tthis.radius = radius;\n    }\n\n    scale( value, r1, r2 ) { \n\treturn (value - r1[0]) * (r2[1] - r2[0]) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    reset() {\n\tthis.a = this.start;\n    }\n\n    step() {\n\treturn (Math.PI * 2) / this.length;\n    }\n\n    angle(y1, y2) {\n\tconst y = y1 - y2;\n\tconst x = 10;\n\tlet theta = Math.atan2(y, x);\n\ttheta *= 180 / Math.PI;\n\n\treturn theta;\n    }\n\n    findStart() {\n\t// TODO: Make this better, I think it needs to look over more points\n\tif (this.start === null) {\n\t    let prev = this.get();\n\t    \n\t    let smallestAngle = Number.MAX_SAFE_INTEGER;\n\t    let bestStart = 0;\n\t    \n\t    for (let i = 0 ; i < this.length ; i++) {\n\t\tconst cur = this.get();\n\t\tconst angle = Math.abs(this.angle(prev, cur));\n\t\t\n\t\tif (angle < smallestAngle) {\n\t\t    smallestAngle = angle;\n\t\t    bestStart = this.a  - (this.step() * 2);\n\t\t}\n\t\t\n\t\tprev = cur;\n\t    }\n\t    \n\t    this.start = bestStart;\n\t}\n    }\n\n    get() {\n\tconst step = this.step();\n\t\n\tconst { r, a } = this;\n\tconst x = r * Math.cos(a);\n\tconst y = r * Math.sin(a);\n\n\tthis.a += step;\n\n\treturn this.scale(this.noise.noise2D(x, y), [0, 1], this.range);\n    }\n}\n\n\nexport default Noise;\n","class Context {\n    static get() {\n\treturn this.ctx;\n    }\n\n    static set(ctx) {\n\tthis.ctx = ctx;\n    }\n\n    static getOffscreen(height, width) {\n\tconst oc = new OffscreenCanvas(height, width);\n\n\treturn oc.getContext('2d');\n    }\n}\n\nContext.ctx = null;\n\nexport default Context;\n","import Noise from './Noise';\nimport Context from './Context';\n\nclass noisyLine {\n    constructor(x1, y1, x2, y2,  a = 100, f = 2) {\n\tconst x = x1 - x2;\n\tconst y = y1 - y2;\n\n\tthis.length = Math.abs(Math.sqrt( x*x + y*y ));\n\tthis.angle = this.getAngle(x1, y1, x2, y2);\n\n\tthis.noiseShape = new Noise(this.length, [0, a], f);\n\tthis.noiseDetail = new Noise(this.length, [0, Math.floor(a/5)], Math.floor(f * 5));\n\n\tthis.x1 = x1;\n\tthis.y1 = y1;\n\tthis.x2 = x2;\n\tthis.y2 = y2;\n\n\tthis.yOffset = null;\n    }\n\n    setAmplitude(amplitude) {\n\tthis.noise.setRange([0, amplitude]);\n    }\n\n    setFrequency(frequency) {\n\tthis.noise.setRadius(frequency);\n    }\n\n    getAngle(x1, y1, x2, y2) {\n\tconst y = y1 - y2;\n\tconst x = x1 - x2;\n\tconst theta = Math.atan2(x, y) * (180 /Math.PI);\n\n\treturn theta + 90;\n    }\n\n    rotate(cx, cy, x, y, angle) {\n\tconst radians = (Math.PI / 180) * angle;\n        const cos = Math.cos(radians);\n        const sin = Math.sin(radians);\n\t\n        const ax = (cos * (x - cx)) + (sin * (y - cy)) + cx;\n        const ay = (cos * (y - cy)) - (sin * (x - cx)) + cy;\n\t\n\treturn {ax: ax, ay: ay};\n    }\n    \n    draw(callback = null) {\n\tconst ctx = Context.get();\n\tconst { noiseShape, noiseDetail, x1, y1 } = this;\n\tconst y = y1;\n\n\t\n\tnoiseShape.reset();\n\tnoiseDetail.reset();\n\tctx.moveTo(x1, y1);\n\n\tlet yOffset = null;\n\t\n\tfor (let x = 0 ; x <= this.length; x++) {\n\t    const n = noiseShape.get() + noiseDetail.get();\n\t    yOffset = yOffset || n;\t  \n\t    \n\t    const _x = x + x1;\n\t    const _y = (y + n) - yOffset;\n\t    const { ax, ay } = this.rotate(x1, y1, _x, _y, this.angle);\n\t    ctx.lineTo(ax, ay);\n\n\t    if (callback !== null) {\n\t\tcallback(ax, ay);\n\t    }\n\t}\n    }\n}\n\nexport default noisyLine;\n","import Context from './Context';\n\nclass Flower {\n    constructor(x, y, radius) {\n\tthis.x = x;\n\tthis.y = y;\n\tthis.radius = radius;\n    }\n\n    draw() {\n\tconst ctx = Context.get();\n\tconst { x, y, radius } = this;\n\n\tconst petalColour = '#fedee2';\n\tconst centerColour = '#e72262';\n\n\tconst rot = (cx, cy, x, y, angle) => {\n\t    const radians = (Math.PI / 180) * angle;\n\t    const cos = Math.cos(radians);\n\t    const sin = Math.sin(radians);\n\t    const nx = (cos * (x - cx)) + (sin * (y - cy)) + cx;\n\t    const ny = (cos * (y - cy)) - (sin * (x - cx)) + cy;\n\t    \n\t    return [nx, ny];\n\t};\n\n\tconst randomRange = (min, max) => {\n\t    return min + Math.random() * (max - min);\n\t};\n\n\tconst petalCount = 5;\n\tconst petalRadius = radius / 2;\n\tconst petalRot = 360 / petalCount;\n\n\n\tlet point = rot(x, y, x, y + petalRadius, randomRange(0, 360));\n\t\n\tfor (let i = 0; i < petalCount; i++) {\n\t    ctx.beginPath();\n\t    ctx.arc(point[0], point[1], petalRadius, 0, 2 * Math.PI);\n\t    ctx.fillStyle = petalColour;\n\t    ctx.shadowColor = \"rgba(0, 0, 0, .05)\";\n\t    ctx.shadowBlur = petalRadius * 3;\n\t    ctx.fill();\n\t    \n\t    point = rot(x, y, point[0], point[1], petalRot);\n\t}\n    }\n}\n\nexport default Flower;\n","import Context from './Context';\nimport noisyLine from './noisyLine';\nimport Flower from './Flower';\n\nclass Tree {\n    constructor(x, y, width, height) {\n\tthis.x = x;\n\tthis.y = y;\n\tthis.width = width;\n\tthis.height = height;\n    }\n\n    draw() {\n\tconst { x, y, width, height } = this;\n\tconst ctx = Context.get();\n\n\tlet cx = x;\n\tlet cy = y;\n\n\tconst maxLevels = 4;\n\n\tconst getLength = (x1, y1, x2, y2) => {\n\t    const x = x1 - x2;\n\t    const y = y1 - y2;\n\t    \n\t    return Math.abs(Math.sqrt( x*x + y*y ));\n\t};\n\n\tconst randomRange = (min, max) => {\n\t    return min + Math.random() * (max - min);\n\t};\n\n\tconst getAngle = (x1, y1, x2, y2) => {\n\t    const y = y1 - y2;\n\t    const x = x1 - x2;\n\t    const theta = Math.atan2(x, y) * (180 / Math.PI);\n\t    \n\t    return theta + 90;\n\t};\n\n\tconst scale = (value, r1, r2) => { \n\t    return (value - r1[0]) * (r2[1] - r2[0]) / (r1[1] - r1[0]) + r2[0];\n\t};\n\n\tconst s = .45;\n\n\tconst drawLimb = (x1, y1, x2, y2, level = 0) => {\n\t    const length = getLength(x1, y1, x2, y2);\n\t    const line = new noisyLine(x1, y1, x2, y2, 10, (length / 500));\n\n\t    ctx.beginPath();\n\t    line.draw();\n\t    ctx.strokeStyle = '#3d3d3d';\n\t    ctx.lineWidth = maxLevels - level;\n\t    ctx.stroke();\t  \n\t    \n\t    if (level <= maxLevels) {\n\t\tconst _draw = (aMod) => {\n\t\t    const cx = x2;\n\t\t    const cy = y2;\n\t\t    const length = getLength(x1, y1, x2, y2) * (s + randomRange(0, .2));\n\t\t    \n\t\t    const tx = x2;\n\t\t    const ty = y2 + (length * randomRange(1, .5));\n\t\t    const ca = getAngle(x1, y1, x2, y2);\n\t\t    const a = ((ca - 90) + aMod + randomRange(-15, 15)) * (Math.PI / 180);\n\t\t    const nx = Math.cos(a) * (tx - cx) - Math.sin(a) * (ty - cy) + cx;\n\t\t    const ny = Math.sin(a) * (tx - cx) - Math.cos(a) * (ty - cy) + cy;\n\n\t\t    drawLimb(cx, cy, nx, ny, level + 1);\n\n\t\t    if (level === maxLevels) {\n\t\t\tconst flower = new Flower(nx, ny, randomRange(3, 6));\n\t\t\tflower.draw();\n\t\t    }\n\t\t};\n\n\t\tconst m = .2;\n\t\tconst minLimbs = 2;\n\t\tconst maxLimbs = 5;\n\n\t\tconst limbs = level === 0 ? maxLimbs : randomRange(minLimbs, maxLimbs);\n\t\tconst diff = 90 / (limbs - 1);\n\t\tfor (let i = 0 ; i < limbs ; i++) {\n\t\t    const a = -45 + (diff * i) * randomRange(1 + m, 1 - m);\n\t\t    _draw(a);\n\t\t}\n\t    }\n\t};\n\n\t\n\tdrawLimb(cx, cy, cx, cy - (height * s));\n    }    \n}\n\nexport default Tree;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Noise from './Noise';\nimport Colour from './Colour';\nimport Tree from './Tree';\n\nimport Context from './Context';\n\nclass App extends Component {\n    constructor(props) {\n\tsuper(props);\n\n\tthis.state = {\n\t    pixelSize: 8,\n\t    height: 500,\n\t    width: 150,\n\t    lenth: 100,\n\t    range: 20,\n\t    yOffset: null,\n\t    drawing: true\n\t};\n\t\n\tthis.drawing = false;\n\tthis.ctx = null;\n\tthis.line = \n\n\tthis.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\tthis.startts = this.getTS();\n    }\n\n    \n    componentDidMount() {\n\tconst canvas = this.refs.canvas;\n\tContext.set(canvas.getContext(\"2d\", { alpha: false }));\n\n\t\n\tthis.rAF = requestAnimationFrame(() => this.updateAnimationState());\n\tthis.updateWindowDimensions();\n\twindow.addEventListener('resize', this.updateWindowDimensions);\n    }\n    \n    updateWindowDimensions() {\n\tconst { clientWidth, clientHeight } = document.documentElement;\n\tconst { range } = this.state;\n\n\tconsole.log(clientWidth, clientHeight);\n\n\tconst length = Math.floor(clientWidth / 2);\n\tconst noise = new Noise(length, [-range, range]);\n\n\tthis.setState({ width: clientWidth, height: clientHeight, noise: noise, length: length }, () => {\n\t    this.initObjects();\n\t    this.nextFrame();\n\t});\n    }\n    \n    componentWillUnmount() {\n\tcancelAnimationFrame(this.rAF);\n\twindow.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateAnimationState() {\n\tthis.ts = this.getTS();\n\tthis.clearFrame();\n\n\tthis.draw();\n\n\tthis.setState({ drawing: false });\n    }\n\n    nextFrame() {\n\tthis.setState({ drawing: true });\n\tsetTimeout(() => {\n\t    this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n\t}, 10);\n    }\n\n    clearFrame() {\n\tconst { width, height } = this.state;\n\tconst ctx = Context.get();\n\n\tconst light = '#d1f2e8';\n\tconst dark = '#6d7580';\n\n\tconst _width = Math.max(750, width);\n\tconst grd = ctx.createRadialGradient(0, 0, _width, width / 2, height / 2, 0);\n\n\tgrd.addColorStop(1, light);\n\tgrd.addColorStop(0, dark);\n\t\n\tctx.fillStyle = grd;\n\tctx.fillRect(0, 0, width, height);\n    }\n\n    getTS() {\n\tconst date = new Date();\n\t\n\treturn date.getTime();\n    }\n\n    scale( value, r1, r2 ) { \n\treturn ( value - r1[ 0 ] ) * ( r2[ 1 ] - r2[ 0 ] ) / ( r1[ 1 ] - r1[ 0 ] ) + r2[ 0 ];\n    }\n\n    initObjects() {\n\tconst { width, height } = this.state;\n\tconst renderElements = [];\n\tconst tree = new Tree(width / 2, height * .9, width * .8, height * .8);\n\n\trenderElements.push(tree);\n\t\n\tthis.renderElements = renderElements;\n    }\n\n    draw() {\n\tthis.renderElements.map(e => e.draw());\n    }\n        \n    render() {\n\tconst { width, height, drawing } = this.state;\n\n        return (\n\t    <div className={ drawing ? 'drawing' : '' }>\n\t      <button onClick={ () => this.nextFrame() } disabled={ drawing } className=\"newTree\" >New Tree</button>\n\t      <div>\n\t\t<canvas ref=\"canvas\" width={ width } height={ height } />\n              </div>\n            </div>\n\t);\t\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}